@if (false) {
<script src="../../Scripts/jquery-1.6.2.js" type="text/javascript"></script>
<script src="../../Scripts/jquery.mobile-1.0b1.js" type="text/javascript"></script>
<script src="../../Scripts/jquery.tmpl.js" type="text/javascript"></script>
<script src="../../Scripts/dojo.js" type="text/javascript"></script>
<script src="../../Scripts/knockout-1.2.0.js" type="text/javascript"></script>
<script src="../../Scripts/knockout.mapping.js" type="text/javascript"></script>
<script src="../../Scripts/seznam.util.js" type="text/javascript"></script>
<script src="../../Scripts/seznam.list.js" type="text/javascript"></script>
<script src="../../Scripts/seznam.account.js" type="text/javascript"></script>
<script src="../../Scripts/seznam.knockout.js" type="text/javascript"></script>
<script src="../../Scripts/seznam.app.js" type="text/javascript"></script>
<script src="../../Scripts/seznam.vars.js" type="text/javascript"></script>

<link href="../../Content/jquery.mobile-1.0b1.css" rel="stylesheet" type="text/css" />
<link href="../../Content/site.css" rel="stylesheet" type="text/css" />
}

<article data-role="page" id="shared_lists"> 
    <script type="text/javascript">
        $(function () {
            $('#shared_lists').live('pagebeforeshow', function (event) {
                $(Views.SharedLists + " section[data-role='content'] ul").listview("refresh");
            });
            var sharedListsViewModel = {
                lists: ko.observableArray(),
                shared: ko.observable(false),
                users: ko.observable(),

                listUpdated: function () {
                    this.lists.valueHasMutated();
                },
                viewList: function (e) {
                    var index = $(e.srcElement).closest("li").index();
                    var list = this.lists()[index];
                    Util.publish(Events.ViewSharedListDetails, [list]);
                }
            };

            ko.applyBindings(sharedListsViewModel, $(Views.SharedLists)[0]);

            Util.subscribe(Events.UpdateAllData, function (data) {
                if (data.sharedLists) {
                    sharedListsViewModel.lists(data.sharedLists);
                    sharedListsViewModel.listUpdated();
                }
            });
            Util.subscribe(Events.SharedListCreated, this, function () {
                sharedListsViewModel.listUpdated();
                var currentPageId = "#" + $.mobile.activePage.attr('id');
                if (currentPageId == Views.SharedLists)
                    $(Views.SharedLists + " section[data-role=content] ul[data-role=listview]").listview("refresh");
            });
        });
    </script>
    <script id="sharedListTemplate" type="text/html">
        {{each lists}}
        <li><a data-bind="click: viewList">${ name }</a> <span class="ui-li-count">${ items.length }</span></li>
        {{/each}}
    </script>

    <section data-role="header"> 
        <a class="back" href="#main">Home</a>
        <h1>My lists</h1> 
    </section>

    <section data-role="content">
        <span data-bind="visible: lists().length === 0">No shared lists!</span> 
        <ul data-bind="template: 'sharedListTemplate'" data-role="listview" data-inset="true" data-theme="a">
        </ul>
    </section>
</article> 


<article data-role="page" id="shared_list_detail">
    <script type="text/javascript">
        $(function () {
            var sharedListDetailViewModel = {
                error: ko.observable(),
                list: ko.observable(),
                items: ko.observableArray(),
                newItemName: ko.observable(""),
                currentItem: ko.observable(),
                count: ko.observable(0),
                addItem: function () {
                    var message = { listId: this.list().id, name: this.newItemName(), count: this.count() };
                    Util.publish(Events.CreateSharedItem, [message]);
                },
                toggleListItem: function (e) {
                    var index = $(e.srcElement).closest("li").index();
                    var item = this.items()[index];
                    var message = { listId: this.list().id, itemName: item.name, itemCompleted: !item.completed };
                    Util.publish(Events.ToggleSharedItem, [message]);
                },
                listUpdated: function () {
                    this.items.valueHasMutated();
                },
                refreshList: function () {
                    $(Views.SharedListDetail + " section[data-role='content'] ul").listview("refresh");
                    this.error(null);
                },
                getTheme: function (complete) {
                    return complete ? 'e' : 'b';
                }

            };
            sharedListDetailViewModel.name = ko.dependentObservable(function () {
                if (this.list())
                    return this.list().name;
                return "";
            }, sharedListDetailViewModel);


            ko.applyBindings(sharedListDetailViewModel, $(Views.SharedListDetail)[0]);

            Util.subscribe(Events.ViewSharedListDetails, function (list) {
                sharedListDetailViewModel.list(list);
                var items = list.items;
                items.getTheme = sharedListDetailViewModel.getTheme;
                sharedListDetailViewModel.items(list.items);
                $.mobile.changePage(Views.SharedListDetail);
                sharedListDetailViewModel.refreshList();

            });

            Util.subscribe(Events.CreateSharedItemFailed, function (message) {
                sharedListDetailViewModel.error(message);
            });

            Util.subscribe(Events.SharedItemCreated, function () {
                sharedListDetailViewModel.listUpdated();
                sharedListDetailViewModel.refreshList();

            });
            Util.subscribe(Events.SharedItemToggled, function () {
                sharedListDetailViewModel.listUpdated();
                sharedListDetailViewModel.refreshList();
            });
            Util.subscribe(Events.SharedItemDeleted, function () {
                sharedListDetailViewModel.listUpdated();
                sharedListDetailViewModel.refreshList();
            });
        });
    </script>
    <script id="sharedListItemTemplate" type="text/html">
        {{each items()}}
        <li data-theme="${ getTheme(completed) }">
            <a data-bind="event: {taphold: toggleListItem}" >${ name }</a>
            {{if count > 0}}
            <span class="ui-li-count">${ count }</span>
            {{/if}}
        </li>
        {{/each}}
        
    </script>
    <section data-role="header">
        <a href="#main" data-icon="home" data-iconpos="notext"></a>
        <h1 data-bind="text: name"></h1>
        <a href="#shared_lists" data-icon="back" data-iconpos="notext"></a>
    </section>
    <section data-role="content">
        <ul data-role="listview" data-bind="template: 'sharedListItemTemplate'" data-inset="true" data-split-theme="a"></ul>
        <span data-bind="visible: items().length === 0">No Items!</span> 
        <div data-role="fieldcontain">
            <input type="text" data-bind="value: newItemName" class="textbox-inline" data-inline="true"/>
            <a data-role="button" data-bind="click: addItem" data-icon="plus" data-inline="true" data-iconpos="notext" style="vertical-align: bottom"></a>
            <input type="number" data-input="number" data-bind="value: count" class="number-inline"/>
        </div>
        <p data-bind="text: error" class="errorMessage"></p>
    </section>
</article>