@Model dynamic

<article id="loggedin_home"> 
@if (false){
    <script src="../../Scripts/jqtouch.js" type="text/javascript"></script>
    <script src="../../Scripts/jquery-1.5.js" type="text/javascript"></script>
    <script src="../../Scripts/dojo.js.uncompressed.js" type="text/javascript"></script>
    <script src="../../Scripts/Seznam.js" type="text/javascript"></script>
}
    <div class="toolbar"> 
        <h1>Seznam</h1> 
        @Html.ActionLink("Log out", "Logout", "Account", null, new { @class = "button slideup" })
    </div>
    <ul class="rounded"> 
        <li class="arrow"><a href="#my_lists">My lists</a> <small class="counter"></small></li> 
        <li class="arrow"><a href="#shared_lists">Shared lists</a> <small class="counter">0</small></li> 
    </ul> 
</article>

<article id="my_lists"> 
    <div class="toolbar"> 
        <a class="back" href="#loggedin_home">Home</a>
        <h1>My lists</h1> 
        <a class="button slidedown" href="#add_list">Add</a> 
    </div>

    <ul class="rounded">
        <li><a href="#add_list">Add</a> </li> 
    </ul>
</article>
 
<article id="add_list" class="form">
    <div class="toolbar"> 
        <a class="back" href="#loggedin_home">Home</a>
        <h1>Add list</h1> 
        <a class="button slideup" href="#my_lists">Cancel</a> 
    </div>
    @using (Html.BeginForm("Add", "List")) {
        <ul class="rounded">
            <li>List name <input type="text" name="name" placeholder="New list" value=""/></li>
        </ul>
        <a class="submit whiteButton">Add</a>
    }
</article>

<article id="personal_list_view"> 
    <div class="toolbar"> 
        <a class="back" href="#my_lists">Back</a>
        <h1 class="title"></h1> 
        <a class="button slidedown" href="#add_list_item">Add</a> 
    </div>

    <ul class="rounded">
        <li class="arrow"><a href="#add_list_item">Add</a> </li> 
    </ul>
</article>

 
<article id="add_list_item" class="form">
    <div class="toolbar"> 
        <a class="back" href="#loggedin_home">Home</a>
        <h1>Add item</h1> 
        <a class="button slideup" href="#personal_list_view">Cancel</a> 
    </div>
    @using (Html.BeginForm("AddPersonalItem", "List")) {
        <ul class="rounded">
            <li>Item name <input type="text" name="name" placeholder="New item" value=""/></li>
            <li>Count (if any)<input type="text" placeholder="0" /></li>
        </ul>
        <input type="hidden" name="listName" />
        <a class="submit whiteButton">Add</a>
    }
</article>

    <script src='@Url.Content("~/Scripts/Seznam.js")' type="text/javascript"></script>
    <script>

        MainView = function (id) {
            this.id = id;

            this.setPersonalListCount = function (count) {
                $("#" + this.id + " ul li:first .counter").html(count);
            };
        };
        MainController = function (model, view) {
            this.model = model;
            this.view = view;

            dojo.subscribe(PersonalListCollection.CountChangedEvent, function (count) {
                this.view.setPersonalListCount(count);
            });
        };
        PersonalListsView = function (id, detailsViewId) {
            this.$ = $("#" + id);
            this.detailsViewId = detailsViewId;
            this.showDetails = null;

            this.addList = function (list) {
                var html = this._getRowHtml(list);
                var $newItemRow = $("ul li:last", this.$);
                $newItemRow.before(html);
            };
            this.updateList = function (list) {
                $("ul li", this.$).each(function ($item) {
                    var $idField = $(".name", $item);
                    if ($idField.val() == list.name) {
                        $item.replace(this._getRowHtml(list));
                    }
                });
            };
            this._getRowHtml = function (list) {
                var row = '<li class="arrow">';
                row += '<a href="#' + this.detailsViewId + '">' + list.name + '</a> ';
                row += '<small class="counter">' + list.count + '</small>';
                row += '<input name="name" type="hidden" value="' + list.name + '" />';
                row += '</li>\n';
                return row;
            };
            $("ul.rounded", this.$).delegate("li.arrow a", "click", function (e) {
                var $row = $(e.target).parent();
                if (this.showDetails) {
                    var row = new PersonalListsRow($row);
                    this.showDetails(row.getId());
                }
                e.preventDefault();
                return false;

                function getName(clickedLink) {
                    return $("input[type='hidden']", $(clickedLink).parent()).val();
                }
            });

        };
        PersonalListsRow = function($row) {
            this.$ = $row;
            this.getId = function() {
                return $("input[name='id']", $row).val();
            };
        };
        PersonalListsController = function(model, view) {
            this.model = model;
            this.view = new PersonalListsView("my_lists", "my_personal_lists"); ;

            dojo.subscribe(PersonalListCollection.ItemAddedEvent, function(list) {
                this.view.AddList(list);
            });

            dojo.subscribe(PersonalList.ChangedEvent, function(list) {
                this.view.updateList(list);
            });

            this.view_onShowDetails = function(name) {

            };
        };

        AddListView = function(id) {
        };

        AddListController = function(model, view) {
            this.model = model;
            this.view = view;

        };

        $(function () {
            var seznam = new Seznam("loggedin_home", "my_lists", "personal_list_view");
            hookupEvents();
            initializeLists();
            
            function initializeLists() {
                var url = '@Url.Action("All", "List")';
                Net.get(url, function (data) {
                    var personalLists = data.personalLists;
                    var lists = new Array();
                    for (i = 0; i < personalLists.length; i++) {
                        var l = personalLists[i];
                        var list = new PersonalList(l.name, l.count);
                        lists.push(list);
                    }
                    seznam.personalLists.addAll(lists);
                });
            }


            function hookupEvents() {
                dojo.subscribe(Events.ShowPersonalListDetailsEvent, function (listName) {
                    seznam.personalLists.select(listName);
                    jQT.goTo("#personal_list_view");
                });

                dojo.subscribe(PersonalListCollection.CurrentItemChangedEvent, function (list) {
                    var view = $("#personal_list_view");
                    $(".title", view).html(list.name);
                    $('#add_list_item input[name="listName"]').val(seznam.personalLists.current.name);
                });

                dojo.subscribe(PersonalListCollection.ListItemChangedEvent, function (list) {
                    var view = $("#my_lists");
                    $("ul li", view).each(function () {
                        var $item = $(this);
                        var $idField = $(".name", $item);
                        if ($idField.val() == list.name) {
                            $item.replace(list.getHtml("#personal_list_view"));
                        }
                    });
                });

                dojo.subscribe(Events.PersonalListAddedEvent, function (message) {
                    var list = $.extend(new PersonalList(), eval(message));
                    seznam.personalLists.add(list);
                });

                dojo.subscribe(Events.PersonalListChangedEvent, function (message) {
                    seznam.personalLists.update(eval(message));
                });

                dojo.subscribe(Events.CreateNewListEvent, function ($form) {
                    var nameElement = $("input[name='name']", $form);

                    var name = nameElement.val();
                    var $view = $(".submit", $form);
                    $view.addClass("loading");
                    Net.put($form, function (data) {
                        if (data['ok'] == true) {
                            nameElement.clear();
                            fakeServerEvent_personalListAdded(name);
                            $view.removeClass("loading");
                            jQT.goBack();
                        } else {
                            throw ("Oooops!, something failed");
                        }
                    });

                    function fakeServerEvent_personalListAdded(name) {
                        var url = '@Url.Action("Detail", "List")/' + name;
                        Net.get(url, function (data) {
                            dojo.publish(Events.PersonalListAddedEvent, [data]);
                        });
                    }
                });

                dojo.subscribe(Events.CreateNewPersonalListItemEvent, function ($form) {
                    var nameElement = $("input[name='name']", $form);
                    var countElement = $("input[name='count']", $form);

                    var name = nameElement.val();
                    var count = countElement.val();
                    Net.put($form, function (data) {
                        if (data['ok'] == true) {
                            nameElement.clear();
                            countElement.clear();
                            fakeServerEvent_personalListItemAdded(seznam.personalLists.current.name, name);
                            jQT.goBack();
                        } else {
                            throw ("Oooops!, something failed");
                        }
                    });

                    function fakeServerEvent_personalListItemAdded(listName, name) {
                        var url = '@Url.Action("PersonalItemDetail", "List")/' + listName + '/' + name;
                        Net.get(url, function (data) {
                            dojo.publish(Events.PersonalListChangedEvent, [data]);
                        });
                    }
                });

                $("#add_list form").submit(function (e) {
                    dojo.publish(Events.CreateNewListEvent, [$(this)]);
                    e.preventDefault();
                    return false;
                });

                $("#add_list_item form").submit(function (e) {
                    dojo.publish(Events.CreateNewPersonalListItemEvent, [$(this)]);
                    e.preventDefault();
                    return false;
                });

                $("#my_lists ul.rounded").delegate("li.arrow a", "click", function (e) {
                    var selectedList = getSelectedList(e.target);
                    dojo.publish(Events.ShowPersonalListDetailsEvent, [selectedList]);
                    e.preventDefault();
                    return false;

                    function getSelectedList(clickedLink) {
                        return jQuery("input[type='hidden']", jQuery(clickedLink).parent()).val();
                    }
                });
            }
        });
</script>
