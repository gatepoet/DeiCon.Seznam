@if (false) {
<script src="../../Scripts/jquery-1.6.2.js" type="text/javascript"></script>
<script src="../../Scripts/jquery.mobile-1.0b1.js" type="text/javascript"></script>
<script src="../../Scripts/jquery.tmpl.js" type="text/javascript"></script>
<script src="../../Scripts/dojo.js" type="text/javascript"></script>
<script src="../../Scripts/knockout-1.2.0.js" type="text/javascript"></script>
<script src="../../Scripts/knockout.mapping.js" type="text/javascript"></script>
<script src="../../Scripts/Seznam.js" type="text/javascript"></script>

<link href="../../Content/jquery.mobile-1.0b1.css" rel="stylesheet" type="text/css" />
<link href="../../Content/site.css" rel="stylesheet" type="text/css" />
}


<article data-role="page" id="personal_lists"> 
    <script type="text/javascript">
        $(function () {
            $('#personal_lists').live('pagebeforeshow', function (event) {
                $(Views.PersonalLists + " section[data-role='content'] ul").listview("refresh");
            });
            var personalListsViewModel = {
                lists: ko.observableArray(),
                shared: ko.observable(false),
                users: ko.observable(),

                addList: function () {
                    $.mobile.changePage(Views.CreateList, { transition: "slideup" });
                },
                listUpdated: function () {
                    this.lists.valueHasMutated();
                },
                viewList: function (e) {
                    var index = $(e.srcElement).closest("li").index();
                    var list = this.lists()[index];
                    Util.publish(Events.ViewListDetails, [list]);
                    console.log("View list ", list.name, " (", list.id, ") ");
                }
            };

            ko.applyBindings(personalListsViewModel, $(Views.PersonalLists)[0]);

            Util.subscribe(Events.UpdateAllData, function (data) {
                if (data.personalLists) {
                    personalListsViewModel.lists(data.personalLists);
                    personalListsViewModel.listUpdated();
                }
            });

            Util.subscribe(Events.ListCreated, this, function (list) {
                personalListsViewModel.listUpdated();
                
                $.mobile.changePage(Views.PersonalLists, { transition: "slidedown" });
            });
        });
    </script>
    <script id="listTemplate" type="text/html">
        {{each lists}}
        <li><a data-bind="click: viewList">${ name }</a> <span class="ui-li-count">${ items.length }</span></li>
        {{/each}}
    </script>

    <section data-role="header"> 
        <a class="back" href="#main">Home</a>
        <h1>My lists</h1> 
        <a data-role="button" data-bind="click: addList">Add</a> 
    </section>

    <section data-role="content">
        <ul data-bind="template: 'listTemplate'" data-role="listview" data-inset="true" data-theme="a">
        </ul>

        <a data-role="button" data-bind="click: addList" data-icon="plus" data-iconpos="right">Add</a>
    </section>
</article> 

<article data-role="page" id="create_list">
    <script type="text/javascript">
        $('#create_list').live('pagecreate', function (event) {
            var createListViewModel = {
                name: ko.observable(),
                shared: ko.observable(false),
                users: ko.observable(),

                create: function () {
                    var msg = {
                        name: this.name(),
                        shared: this.shared()
                    };
                    if (this.shared())
                        msg.users = this.users().split(",");
                    Util.publish(Events.CreateList, [msg]);
                },
                update: function () {
                    $(Views.CreateList).trigger("refresh");
                }
            };
            createListViewModel.allowCreate = ko.dependentObservable(function () {
                return this.name();
            }, createListViewModel);

            ko.bindingHandlers.jQueryButtonEnable = {
                update: function (element, valueAccessor) {
                    ko.bindingHandlers.enable.update(element, valueAccessor);
                    var value = ko.utils.unwrapObservable(valueAccessor());
                    $(element).button(value ? "enable" : "disable");
                }
            };
            ko.bindingHandlers.jQueryTextBoxEnable = {
                init: function (element, valueAccessor) {
                    var deviceAgent = navigator.userAgent.toLowerCase();
                    var agentID = true; //deviceAgent.match("android");
                    if (agentID)
                        $(element).children().each(function () {
                            if (valueAccessor()())
                                $(this).removeAttr('disabled');
                            else
                                $(this).attr('disabled', 'disabled');
                            //$(this).get().disable = !valueAccessor()();
                        });


                    else {
                        var value = ko.utils.unwrapObservable(valueAccessor());
                        $(element).toggle(value);
                    }
                },
                update: function (element, valueAccessor) {
                    //ko.bindingHandlers.visible.update(element, valueAccessor);
                    var agentID = true; //deviceAgent.match("android");
                    if (agentID)
                        $(element).children().each(function () {
                            if (valueAccessor()())
                                $(this).removeAttr('disabled');
                            else
                                $(this).attr('disabled', 'disabled');

                            //                            $(this).get().disable = !valueAccessor()();
                        });


                    else {
                        var value = ko.utils.unwrapObservable(valueAccessor());
                        $(element).toggle(value);
                    }
                    //                    var value = ko.utils.unwrapObservable(valueAccessor());
                    //                    if (value)
                    //                        $(element).slideDown();
                    //                    else
                    //                        $(element).slideUp();
                }
            };
            ko.bindingHandlers.show = {
                init: function (element, valueAccessor) {
                    var value = ko.utils.unwrapObservable(valueAccessor());
                    if (value)
                        $(element).show();
                    else
                        $(element).hide();
                },
                update: function (element, valueAccessor) {
                    var va = valueAccessor();
                    var value = ko.utils.unwrapObservable(va);
                    if (value)
                        $(element).show();
                    else
                        $(element).hide();
                }
            };
            // my checkboxes handler
            ko.bindingHandlers.jqmCheck = {
                init: function (element, valueAccessor) {
                    // Get the observable we are bound to
                    var modelValue = valueAccessor();

                    // register handler for changes
                    $(element).click(function () {
                        // update model data
                        if (ko.utils.unwrapObservable(modelValue)) { modelValue(false); }
                        else { modelValue(true); }
                    });
                },
                update: function (element, valueAccessor) {
                    // First get the latest data that we're bound to
                    var value = valueAccessor();

                    // Next, whether or not the supplied model property is observable, get its current value
                    var valueUnwrapped = ko.utils.unwrapObservable(value);

                    // Now manipulate the DOM element to toggle check mark

                    $(element).prop("checked", !valueUnwrapped);
                    //value.valueHasMutated();
                    //$(element).find("input[type='checkbox']").prop("checked", !valueUnwrapped);
                    if (valueUnwrapped) {

                        //                        $(element).find('.ui-icon').addClass('ui-icon-checkbox-on').removeClass('ui-icon-checkbox-off');
                    }
                    else {
                        //                        $(element).find('.ui-icon').addClass('ui-icon-checkbox-off').removeClass('ui-icon-checkbox-on');
                    }
                }
            };


            ko.applyBindings(createListViewModel, $(Views.CreateList)[0]);



        });
    </script>
    <section data-role="header"> 
        <a href="#main">Home</a>
        <h1>Add list</h1> 
        <a href="#personal_lists">Cancel</a> 
    </section>
    <section data-role="content">
        <form>
            <div data-role="fieldcontain">
                <label for="name">List name</label>
                <input type="text" name="name" data-bind="value: name" placeholder="New list"/>
            </div>
            <div data-role="fieldcontain" >
                <div data-bind="jqmCheck: shared"><input type="checkbox" name="checkbox" id="checkbox" class="custom" /></div>
		        <label for="checkbox">Shared</label>
            </div>
            <div data-role="fieldcontain" data-bind="jQueryTextBoxEnable: shared">
                <label for="users" title="Comma separated">Users</label>
                <input type="text" name="users" data-bind="value: users" />
            </div>
            <button data-bind="click: create">Create</button>
        </form>
    </section>
</article>


<article data-role="page" id="personal_list_detail">
    <script type="text/javascript">
        $(function () {
            var personalListDetailViewModel = {
                error: ko.observable(),
                list: ko.observable(),
                items: ko.observableArray(),
                newItemName: ko.observable(""),
                currentItem: ko.observable(),
                count: ko.observable(0),
                addItem: function () {
                    var message = { listId: this.list().id, name: this.newItemName(), count: this.count() };
                    Util.publish(Events.CreatePersonalListItem, [message]);
                },
                toggleListItem: function (e) {
                    var index = $(e.srcElement).closest("li").index();
                    var item = this.items()[index];
                    var message = { listId: this.list().id, itemName: item.name, itemCompleted: !item.completed };
                    Util.publish(Events.TogglePersonalListItem, [message]);
                },
                viewContextMenu: function (e) {
                    var index = $(e.srcElement).closest("li").index();
                    var item = this.items()[index];


                },
                deleteItem: function (e) {
                    var index = $(e.srcElement).closest("li").index();
                    var item = this.items()[index];
                    Util.publish(Events.DeletePersonalListItem, [item]);
                },
                listUpdated: function () {
                    this.items.valueHasMutated();
                },
                refreshList: function () {
                    $(Views.PersonalListDetail + " section[data-role='content'] ul").listview("refresh");
                    this.error(null);
                },
                getTheme: function (complete) {
                    return complete ? 'e' : 'b';
                }

            };
            personalListDetailViewModel.name = ko.dependentObservable(function () {
                if (this.list())
                    return this.list().name;
                return "";
            }, personalListDetailViewModel);

            ko.bindingHandlers.longClick = {
                init: function (element, valueAccessor) {
                    ko.utils.registerEventHandler(element, "taphold", function () {
                        console.log("hold");
                        valueAccessor()();
                    });
                }
            };

            ko.applyBindings(personalListDetailViewModel, $(Views.PersonalListDetail)[0]);

            Util.subscribe(Events.ViewListDetails, function (list) {
                personalListDetailViewModel.list(list);
                var items = list.items;
                items.getTheme = personalListDetailViewModel.getTheme;
                personalListDetailViewModel.items(list.items);
                $.mobile.changePage(Views.PersonalListDetail);
                personalListDetailViewModel.refreshList();

            });

            Util.subscribe(Events.CreatePersonalListItemFailed, function (message) {
                personalListDetailViewModel.error(message);
            });

            Util.subscribe(Events.PersonalListItemCreated, function () {
                personalListDetailViewModel.listUpdated();
                personalListDetailViewModel.refreshList();

            });
            Util.subscribe(Events.PersonalListItemToggled, function () {
                personalListDetailViewModel.listUpdated();
                personalListDetailViewModel.refreshList();
            });
            Util.subscribe(Events.PersonalListItemDeleted, function () {
                personalListDetailViewModel.listUpdated();
                personalListDetailViewModel.refreshList();
            });
        });
    </script>
    <script id="listItemTemplate" type="text/html">
        {{each items()}}
        <li data-theme="${ getTheme(completed) }">
            <a data-bind="event: {taphold: toggleListItem}" >${ name }</a>
            {{if count > 0}}
            <span class="ui-li-count">${ count }</span>
            {{/if}}
            <a data-bind="click: deleteItem" data-icon="gear" data-theme="c">Edit</a>
        </li>
        {{/each}}
        
    </script>
    <section data-role="header">
        <a href="#main" data-icon="home" data-iconpos="notext"></a>
        <h1 data-bind="text: name"></h1>
        <a href="#personal_lists" data-icon="back" data-iconpos="notext"></a>
    </section>
    <section data-role="content">
        <ul data-role="listview" data-bind="template: 'listItemTemplate'" data-inset="true" data-split-theme="a"></ul>
        <span data-bind="visible: items().length === 0">No Items!</span> 
        <div data-role="fieldcontain">
            <input type="text" data-bind="value: newItemName" class="textbox-inline" data-inline="true"/>
            <a data-role="button" data-bind="click: addItem" data-icon="plus" data-inline="true" data-iconpos="notext" style="vertical-align: bottom"></a>
            <input type="number" data-input="number" data-bind="value: count" class="number-inline"/>
        </div>
        <p data-bind="text: error" class="errorMessage"></p>
    </section>
</article>